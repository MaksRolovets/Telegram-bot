from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN

storage = MemoryStorage()

cheks = False 

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

class StateModeAdd(StatesGroup):
    photo = State()
    category = State()
    name = State()
    artikul = State()

class Delete(StatesGroup):
    code = State()

class Search(StatesGroup):
    search_code = State()

#chat_id=-1001859859879 
db = sqlite3.connect('philms.db')
cur = db.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS philms(   
    photo TEXT,
    category TEXT,
    name TEXT,
    code TEXT);
""")    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã

db.commit()

async def start_but(message):
    keyboard = types.ReplyKeyboardMarkup( resize_keyboard=True)
    kod_search = KeyboardButton('–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—Éüîé') 
    reklama = KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å –æ —Ä–µ–∫–ª–∞–º–µ‚òéÔ∏è')
    key_admin = KeyboardButton('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å') 
    keyboard.add(kod_search, reklama)
    user_status = await bot.get_chat_member(chat_id='-1001859859879', user_id=message.from_user.id)
    if user_status['status'] == 'administrator':
        keyboard.add(key_admin)
    return keyboard

async def admin_but():
    keyboard_admin = ReplyKeyboardMarkup(resize_keyboard=True)
    key_add = KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥')
    key_delete = KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–æ–¥')
    key_back = KeyboardButton(text='/start')
    keyboard_admin.add(key_add, key_delete, key_back)
    return keyboard_admin

@dp.message_handler(commands='start') # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def start(message: types.Message):
    global cheks
    cheks = False
    await message.answer(text='–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–æ–¥—É, —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–ª–µ–µ—Ä!\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—É–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', reply_markup= await start_but(message))

@dp.message_handler(lambda message: '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' in message.text)
async def adminka(message: types.Message):
    user_status = await bot.get_chat_member(chat_id='-1001859859879', user_id=message.from_user.id)
    if user_status['status'] == 'administrator':
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤–∫–ª—é—á–µ–Ω–∞', reply_markup=await admin_but())

@dp.message_handler(lambda message: '–ù–∞–ø–∏—Å–∞—Ç—å –æ —Ä–µ–∫–ª–∞–º–µ‚òéÔ∏è' in message.text)
async def reklam(message: types.Message):
    await message.answer('–ü–æ –ø–æ–≤–æ–¥—É —Ä–µ–∫–ª–∞–º—ã –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: https://t.me/Massimo_235')

@dp.message_handler(lambda message: '–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—Éüîé' in message.text, state=None)
async def check_links(message: types.Message):
    user_status = await bot.get_chat_member(chat_id='-1001859859879', user_id=message.from_user.id) 
    if user_status['status'] == 'left':
        inline_kb = InlineKeyboardMarkup(row_width=1)
        url_but1 = InlineKeyboardButton(text='–§–∏–ª—å–º—ã', url = 'https://t.me/filmiztikt')
        check_links = InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚úÖ', callback_data='check')
        inline_kb.add(url_but1, check_links)
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã-—Å–ø–æ–Ω—Å–æ—Ä—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É‚úÖ¬ª', reply_markup=inline_kb)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞')
        await Search.search_code.set()

@dp.message_handler(state=Search.search_code)
async def searching(message: types.Message, state=FSMContext):
    try:
        cur.execute(f'SELECT * FROM philms WHERE code ={message.text}')
        data = cur.fetchone()
        await message.answer_photo(photo=data[0],caption=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data[1]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {data[2]}')
        await state.finish()
    except:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ü–æ–∂–∞—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        await state.finish()
        
@dp.callback_query_handler(lambda c: c.data == 'check')
async def checking(message: types.CallbackQuery):
    global cheks
    user_status = await bot.get_chat_member(chat_id='-1001859859879', user_id=message.from_user.id) 
    if user_status['status'] == 'left':
        cheks = False
        await bot.answer_callback_query(message.id, text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª‚ùå', show_alert=True)
    else:
        cheks = True
        await bot.answer_callback_query(message.id, text='Good luck!', show_alert=True)

@dp.message_handler(lambda message: '–£–¥–∞–ª–∏—Ç—å –∫–æ–¥' in message.text, state=None)
async def delete(message: types.Message):
    user_status = await bot.get_chat_member(chat_id='-1001859859879', user_id=message.from_user.id)
    if user_status['status'] == 'administrator':
        await Delete.code.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥–µ!')
        return
    
@dp.message_handler(state=Delete.code) # —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –±–¥
async def delete_code(message: types.Message, state=FSMContext):
        try:
            cur.execute(f'DELETE FROM philms WHERE code = {message.text}')
            db.commit()
            await message.answer(f'–ö–æ–¥ {message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup= await start_but(message))
        except:
            await message.answer('–û—à–∏–±–∫–∞! –¢–∞–∫–æ–≥–æ –∫–æ–¥–∞ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ.')
        await state.finish()
#–ó–∞–ø—É—Å–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã
@dp.message_handler(lambda message: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥' in message.text, state=None)
async def state_start(message: types.Message):
    user_status = await bot.get_chat_member(chat_id='-1001859859879', user_id=message.from_user.id)
    if user_status['status'] == 'administrator':
        await StateModeAdd.photo.set()
        await message.answer('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥–µ!')
        return
#–ª–æ–≤–∏–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(content_types=['photo'], state=StateModeAdd.photo)
async def load_photo(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id #–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å
        print(message.photo)
    cat_murkup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    but_film = KeyboardButton('–§–∏–ª—å–º—ã')
    but_serial = KeyboardButton('–°–µ—Ä–∏–∞–ª—ã')
    but_anime = KeyboardButton('–ê–Ω–∏–º–µ')
    cat_murkup.add(but_film, but_serial, but_anime)
    await StateModeAdd.next()
    await message.answer('–í–≤–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=cat_murkup) 

# –õ–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=StateModeAdd.category)
async def save_ctg(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['category'] = message.text
        #ReplyKeyboardRemove()
    await StateModeAdd.next()
    await message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')

# –õ–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=StateModeAdd.name)
async def save_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await StateModeAdd.next()
    await message.answer('–í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª')

#–õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
@dp.message_handler(state=StateModeAdd.artikul)
async def save_artic(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['artikul'] = message.text
    async with state.proxy() as data:
        cur.execute('INSERT INTO philms VALUES (?,?,?,?);',(data['photo'], data['category'], data['name'], data['artikul']))
        db.commit()
    await state.finish()
    await message.answer('–ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!',reply_markup= await start_but(message))

@dp.message_handler(state="*", commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
async def close_state(message: types.Message, state=FSMContext):
    current_state = await state.get_state()
    print(await state.get_state())
    if current_state is None:
        return
    await state.finish()
    await message.answer('OK', reply_markup= await start_but(message))

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)